"use strict";var xt=Object.defineProperty;var Mt=(n,e,t)=>e in n?xt(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var Q=(n,e,t)=>(Mt(n,typeof e!="symbol"?e+"":e,t),t);const y=require("obsidian");function $e(n){return n.length>0?n.replace(/^(.{3})(.*)(.{4})$/,"$1****$3"):""}const ae="cloudflare-ai",it="Cloudflare AI";var rt=(n=>(n.LLAMA_70B_FAST="@cf/meta/llama-3.3-70b-instruct-fp8-fast",n.LLAMA_1B="@cf/meta/llama-3.2-1b-instruct",n.LLAMA_3B="@cf/meta/llama-3.2-3b-instruct",n.LLAMA_8B="@cf/meta/llama-3.1-8b-instruct",n.LLAMA_8B_FP8="@cf/meta/llama-3.1-8b-instruct-fp8",n.LLAMA_8B_FAST="@cf/meta/llama-3.1-8b-instruct-fast",n.LLAMA_8B_AWQ="@cf/meta/llama-3.1-8b-instruct-awq",n.LLAMA_70B="@cf/meta/llama-3.1-70b-instruct",n))(rt||{});const Tt="@cf/meta/llama-3.1-8b-instruct-fast";var at=(n=>(n.BGE_SMALL="@cf/baai/bge-small-en-v1.5",n.BGE_BASE="@cf/baai/bge-base-en-v1.5",n.BGE_LARGE="@cf/baai/bge-large-en-v1.5",n))(at||{});const It="@cf/baai/bge-base-en-v1.5",Nt={cloudflareAccountId:"",cloudflareAiGatewayId:"",cloudflareAiApiKey:"",cloudflareVectorizeApiKey:"",modelId:Tt,maxTokens:256,temperature:.6,textEmbeddingsModelId:It,vectorizeIndexName:"obsidian-notes",topK:3,minSimilarityScore:.7,ignoredFolders:[],syncEnabled:!1,autoSyncInterval:30,cloudflareAiApiKeySaved:!1,cloudflareVectorizeApiKeySaved:!1,customTemplatesFolder:"ai/templates",logLevel:"error"},Rt={continue:{name:"continue",description:"Continue writing from the current text",prompt:`Continue this text naturally, maintaining the same style and tone. Only return the continuation, no explanations or other text:

{{text}}`},summarise:{name:"summarise",description:"Summarise the selected text",prompt:`Provide a concise summary of this text. Return only the summary, no explanations or other text:

{{text}}`},expand:{name:"expand",description:"Expand on the selected text",prompt:`Expand this text with more details and examples. Return only the expanded text, no explanations or other text:

{{text}}`},rewrite:{name:"rewrite",description:"Rewrite the selected text",prompt:`Rewrite this text to improve clarity and flow. Return only the rewritten text, no explanations or other text:

{{text}}`},simplify:{name:"simplify",description:"Simplify the selected text",prompt:`Simplify this text to make it easier to understand. Return only the simplified text, no explanations or other text:

{{text}}`},"suggest-tags":{name:"suggest-tags",description:"Suggest tags for the selected text",prompt:`Suggest tags for this text. Return only the tags, no explanations or other text:

{{text}}`},"generate-title":{name:"generate-title",description:"Generate a title from the content",prompt:`Generate a clear, concise title for this text. Return only the title, no quotes or extra text. (do not use * " \\ / < > : | ? .):

{{text}}`},"generate-text":{name:"Generate text",description:"Generate text with custom variables",prompt:`Write a {{style}} passage about {{topic}} that is {{length}} long.

Use this context:
{{text}}`,variables:["style","topic","length"]},brainstorm:{name:"brainstorm",description:"Brainstorm ideas for the selected text",prompt:`Brainstorm ideas for this text. Return only the ideas, no explanations or other text:

{{text}}`}};var st,nt;const le=((nt=(st=window.electron)==null?void 0:st.remote)==null?void 0:nt.safeStorage)??{isEncryptionAvailable:()=>!1,encryptString:n=>Buffer.from(n),decryptString:n=>n.toString()},Lt={level:"error",useTimestamp:!0,output:console,serviceName:it};class Pt{constructor(){this.config={...Lt},this.listeners=new Set}setConfig(e){this.config={...this.config,...e},this.notifyListeners()}getConfig(){return this.config}addListener(e){this.listeners.add(e)}removeListener(e){this.listeners.delete(e)}notifyListeners(){this.listeners.forEach(e=>e(this.config))}}const ve=new Pt,ot=n=>{ve.setConfig(n)},Ft=()=>ve.getConfig();class $t extends y.PluginSettingTab{constructor(e,t){super(e,t),this.temporaryAiApiKey="",this.temporaryVectorizeApiKey="",this.plugin=t,this.settings=t.settings}createAccountSettings(e){new y.Setting(e).setName("Cloudflare account ID").setDesc("The ID of your Cloudflare account").addText(t=>t.setPlaceholder("Enter your Cloudflare Account ID").setValue(this.settings.cloudflareAccountId).onChange(async s=>{this.settings.cloudflareAccountId=s,await this.plugin.saveSettings()})),new y.Setting(e).setName("Cloudflare AI Gateway ID").setDesc("The ID of your Cloudflare AI Gateway").addText(t=>t.setPlaceholder("Enter your Cloudflare AI Gateway ID").setValue(this.settings.cloudflareAiGatewayId).onChange(async s=>{this.settings.cloudflareAiGatewayId=s,await this.plugin.saveSettings()}))}createApiKeySettings(e){this.createApiKeySetting(e,"Cloudflare AI API key","The API key for your Cloudflare AI Gateway","cloudflareAiApiKey","cloudflareAiApiKeySaved",this.temporaryAiApiKey,t=>this.temporaryAiApiKey=t),this.createApiKeySetting(e,"Cloudflare Vectorize API key","The API key for your Cloudflare Vectorize API","cloudflareVectorizeApiKey","cloudflareVectorizeApiKeySaved",this.temporaryVectorizeApiKey,t=>this.temporaryVectorizeApiKey=t)}createApiKeySetting(e,t,s,i,r,a,o){this.plugin.settings[r]?new y.Setting(e).setName(t).setDesc(s).addText(u=>{try{let l=this.plugin.settings[i];if(le.isEncryptionAvailable()&&l){const h=le.decryptString(Buffer.from(l,"base64"));u.setPlaceholder($e(h))}else u.setPlaceholder($e(l))}catch{u.setPlaceholder("********")}u.setDisabled(!0)}).addButton(u=>{u.setButtonText("Remove API Key").onClick(async()=>{this.plugin.settings[i]="",this.plugin.settings[r]=!1,await this.plugin.saveSettings(),new y.Notice(`${t} removed`),this.display()})}):new y.Setting(e).setName(t).setDesc(s).addText(u=>u.setPlaceholder(`Enter your ${t}`).onChange(l=>o(l))).addButton(u=>{u.setButtonText("Save API Key").onClick(async()=>{if(a)try{if(le.isEncryptionAvailable()){const l=le.encryptString(a);this.plugin.settings[i]=Buffer.from(l).toString("base64")}else this.plugin.settings[i]=a;this.plugin.settings[r]=!0,o(""),await this.plugin.saveSettings(),new y.Notice(`${t} saved successfully`),this.display()}catch(l){new y.Notice("Failed to save API key"),console.error(l)}else new y.Notice("Please enter an API key")})})}createModelSettings(e){new y.Setting(e).setName("Text model").setHeading(),new y.Setting(e).setName("Model ID").setDesc("The ID of the text model to use").addDropdown(t=>t.addOptions(Object.fromEntries(Object.entries(rt).map(([s,i])=>{var r;return[i,((r=i.split("/").pop())==null?void 0:r.replace(/-/g," ").toUpperCase())??i]}))).setValue(this.settings.modelId).onChange(async s=>{this.settings.modelId=s,await this.plugin.saveSettings()})),this.createNumberSetting(e,"Max tokens","The maximum number of tokens to generate","maxTokens",1,1/0),this.createNumberSetting(e,"Temperature","The temperature of the text model","temperature",0,5,!0)}createVectorizeSettings(e){new y.Setting(e).setName("Cloudflare Vectorize").setHeading(),new y.Setting(e).setName("Vectorize index name").setDesc("The name of the index").addText(t=>t.setPlaceholder("Enter the name of the index to use").setValue(this.settings.vectorizeIndexName).onChange(async s=>{this.settings.vectorizeIndexName=s,await this.plugin.saveSettings()})),new y.Setting(e).setName("Text embeddings model ID").setDesc("The ID of the text embeddings model to use").addDropdown(t=>t.addOptions(Object.fromEntries(Object.entries(at).map(([s,i])=>{var r;return[i,((r=i.split("/").pop())==null?void 0:r.replace(/-/g," ").toUpperCase())??i]}))).setValue(this.settings.textEmbeddingsModelId).onChange(async s=>{this.settings.textEmbeddingsModelId=s,await this.plugin.saveSettings()})),this.createNumberSetting(e,"Top k","The number of results to return","topK",1,1/0),this.createNumberSetting(e,"Min similarity score","The minimum similarity score to return","minSimilarityScore",0,1,!0)}createSyncSettings(e){new y.Setting(e).setName("Sync").setHeading(),new y.Setting(e).setName("Ignored folders").setDesc("Folders to ignore when syncing notes, separated by commas").addText(t=>t.setPlaceholder("Enter the folders to ignore").setValue(this.settings.ignoredFolders.join(",")).onChange(async s=>{this.settings.ignoredFolders=s.split(",").filter(Boolean),await this.plugin.saveSettings()})),new y.Setting(e).setName("Enable auto sync").setDesc("Automatically sync notes at regular intervals").addToggle(t=>t.setValue(this.settings.syncEnabled).onChange(async s=>{this.settings.syncEnabled=s,await this.plugin.saveSettings()})),this.createNumberSetting(e,"Sync interval","How often to sync (in minutes)","autoSyncInterval",1,1/0)}createTextGeneratorSettings(e){new y.Setting(e).setName("Text Generator").setHeading(),new y.Setting(e).setName("Custom templates folder").setDesc("The folder to store custom templates").addText(t=>t.setPlaceholder("Enter the folder to store custom templates").setValue(this.settings.customTemplatesFolder).onChange(async s=>{this.settings.customTemplatesFolder=s,await this.plugin.saveSettings()}))}createLoggerSettings(e){new y.Setting(e).setName("Logging").setHeading(),new y.Setting(e).setName("Log Level").setDesc("Set the logging level for the plugin").addDropdown(t=>t.addOptions({error:"Error",warn:"Warning",info:"Info",debug:"Debug"}).setValue(this.settings.logLevel||"error").onChange(async s=>{this.settings.logLevel=s,ot({level:s}),await this.plugin.saveSettings()}))}createNumberSetting(e,t,s,i,r,a,o=!1){new y.Setting(e).setName(t).setDesc(s).addText(c=>{var u;return c.setPlaceholder(t).setValue(((u=this.plugin.settings[i])==null?void 0:u.toString())??"").onChange(async l=>{const h=o?parseFloat(l):parseInt(l);!isNaN(h)&&h>=r&&h<=a?(this.plugin.settings[i]=h,await this.plugin.saveSettings()):new y.Notice(`Invalid value for ${t}. Must be between ${r} and ${a}`)})})}display(){const{containerEl:e}=this;e.empty(),this.createAccountSettings(e),this.createApiKeySettings(e),this.createModelSettings(e),this.createVectorizeSettings(e),this.createSyncSettings(e),this.createTextGeneratorSettings(e),this.createLoggerSettings(e)}}const Dt={200:"OK",201:"Created",202:"Accepted",204:"No Content",300:"Multiple Choices",301:"Moved Permanently",302:"Found",304:"Not Modified",400:"Bad Request",401:"Unauthorized",403:"Forbidden",404:"Not Found",408:"Request Timeout",409:"Conflict",429:"Too Many Requests",500:"Internal Server Error",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout"};async function Gt(n,e){const t=typeof n=="string"?n:n.url,s=typeof n=="object"?{...e,...await Bt(n)}:e||{},i={url:t,method:s.method||"GET",headers:s.headers,body:s.body,throw:!1},r=s.headers,a=r["Content-Type"];a&&(i.contentType=a);const o=r.Accept==="text/event-stream";try{const c=await y.requestUrl(i);return zt(c,t,o,s.throw)}catch(c){throw new Error(`Fetch request failed: ${c instanceof Error?c.message:String(c)}`)}}function zt(n,e,t,s){const i=n.status>=200&&n.status<300;if(!i&&s!==!1)throw new Error(`HTTP error! status: ${n.status}`);const r={ok:i,status:n.status,statusText:Dt[n.status]||"",headers:new Headers(n.headers),url:e,type:"basic",redirected:!1,bodyUsed:!1,arrayBuffer:()=>Promise.resolve(n.arrayBuffer),text:()=>Promise.resolve(n.text),json:()=>Promise.resolve(n.json),blob:()=>Promise.reject(new Error("Blob responses not supported")),formData:()=>Promise.reject(new Error("FormData responses not supported")),clone:()=>{throw new Error("Response cloning not supported")}};if(t){const a=n.text.split(`
`);let o=0;const c=new TextEncoder,u=new ReadableStream({start(l){function h(){if(o<a.length){const g=a[o]+`
`;l.enqueue(c.encode(g)),o++,setTimeout(h,1)}else l.close()}h()}});return{...r,body:u}}return{...r,body:null}}async function Bt(n){var s;const e=(s=n.headers.get("content-type"))==null?void 0:s.toLowerCase(),t=e?await Ot(n,e):void 0;return{url:n.url,method:n.method,headers:Object.fromEntries(n.headers),...t&&{body:t}}}async function Ot(n,e){return e.includes("application/json")?JSON.stringify(await n.json()):e.includes("form")?n.formData():n.text()}class pe extends Error{constructor(e,t,s){super(t),this.status=e,this.response=s,this.name="ApiError"}}class ye extends Error{constructor(e,t,s){super(e),this.cause=t,this.request=s,this.name="ProxyError"}}class Vt{constructor(e,t){this.logger=e,this.config={maxRetries:1,timeout:3e4,retryDelay:1e3,defaultHeaders:{}},t&&(this.config={...this.config,...t})}async fetch(e,t){let s;for(let i=0;i<this.config.maxRetries;i++)try{i>0&&this.logger.info("Retrying proxy request",{attempt:i,url:typeof e=="string"?e:e.url});const r=this.enhanceRequestInit(t),a=new AbortController,o=setTimeout(()=>{a.abort()},this.config.timeout);try{const c=await Gt(e,{...r,signal:a.signal});if(this.shouldRetry(c)&&i<this.config.maxRetries-1){s=new ye(`Received status ${c.status}`,void 0,e),await this.delay(this.getRetryDelay(i));continue}return c}finally{clearTimeout(o)}}catch(r){if(s=this.normalizeError(r,e),r instanceof DOMException&&r.name==="AbortError"||i===this.config.maxRetries-1)throw this.logError(s,i),s;await this.delay(this.getRetryDelay(i))}throw s||new ye("Maximum retries exceeded",void 0,e)}shouldRetry(e){return[429,503,504].includes(e.status)}enhanceRequestInit(e){return{...e,headers:{...this.config.defaultHeaders,...e==null?void 0:e.headers}}}getRetryDelay(e){return Math.min(this.config.retryDelay*Math.pow(2,e),1e4)}normalizeError(e,t){return e instanceof Error?new ye(e.message,e,t):new ye(String(e),void 0,t)}logError(e,t){this.logger.error("Proxy request failed:",{error:e.message,stack:e.stack,attempt:t+1,maxRetries:this.config.maxRetries})}delay(e){return new Promise(t=>setTimeout(t,e))}}class qt{constructor(e){this.logger=e,this.decoder=new TextDecoder,this.proxyService=new Vt(e)}async post(e,t,s,i){try{this.logger.debug("Starting API request",{url:e,body:t});const r=await this.makeRequest(e,t,s);return r.ok||await this.handleErrorResponse(r),i!=null&&i.stream?await this.handleStreamingResponse(r,i):await this.handleRegularResponse(r)}catch(r){throw this.handleError(r),r}}async makeRequest(e,t,s){return this.proxyService.fetch(e,{method:"POST",headers:{Accept:"text/event-stream","Content-Type":"application/json",...s},body:JSON.stringify(t)})}async handleErrorResponse(e){var r;const t=await e.text(),s=this.safeParseJson(t),i=((r=s==null?void 0:s.error)==null?void 0:r.message)||`HTTP ${e.status}: ${e.statusText}`;throw new pe(e.status,i,s)}async handleRegularResponse(e){const t=await e.text(),s=this.safeParseJson(t);if(!s.result)throw new pe(e.status,"Invalid response format: missing 'result' field",s);return s.result}async handleStreamingResponse(e,t){var a;if(!e.body)throw new pe(e.status,"No response body available");const s=e.body.getReader();let i=!0,r="";try{for(;;){const{value:o,done:c}=await s.read();if(c)break;this.logger.debug("Streaming chunk",{chunk:o});const u=this.decoder.decode(o,{stream:!0}),l=this.processStreamingChunk(u);l&&(r+=l,(a=t.onToken)==null||a.call(t,l,i),i=!1)}return r}finally{s.releaseLock()}}processStreamingChunk(e){const t=e.split(`
`);let s="";for(const i of t){const r=this.processStreamingLine(i);r&&(s+=r)}return s}processStreamingLine(e){const t=e.replace(/^data: /,"").trim();if(!t||t==="[DONE]")return"";try{const s=this.safeParseJson(t);return(s==null?void 0:s.response)??""}catch{return""}}safeParseJson(e){try{return JSON.parse(e)}catch{return null}}handleError(e){this.logger.error("API request failed:",{error:e instanceof Error?e.message:String(e),stack:e instanceof Error?e.stack:void 0,type:e instanceof pe?"ApiError":"UnknownError"})}}const jt="https://gateway.ai.cloudflare.com/v1";class Kt{constructor(e,t,s,i,r,a,o){this.logger=e,this.cloudflareAccountId=t,this.cloudflareAiGatewayId=s,this.cloudflareAiApiKey=i,this.modelId=r,this.maxTokens=a,this.temperature=o,this.email="test@test.com",this.apiService=new qt(e)}validateConfig(){if(!this.cloudflareAccountId)throw new Error("Cloudflare Account ID is required");if(!this.cloudflareAiGatewayId)throw new Error("AI Gateway ID is required");if(!this.cloudflareAiApiKey)throw new Error("AI API Key is required");if(!this.modelId)throw new Error("Model ID is required");if(!this.maxTokens||this.maxTokens<1)throw new Error("Invalid max tokens value");if(this.temperature<0||this.temperature>1)throw new Error("Temperature must be between 0 and 1")}getEndpointUrl(e){return`${jt}/${this.cloudflareAccountId}/${this.cloudflareAiGatewayId}/workers-ai/${e}`}buildRequestBody(e){const t={model:e.modelId};if(e.type==="text")e.messages&&(t.messages=e.messages),e.prompt&&(t.prompt=e.prompt),e.shouldStream&&(t.stream=!0),t.max_tokens=this.maxTokens,t.temperature=this.temperature;else if(e.type==="embedding"){if(!e.prompt)throw new Error("Prompt is required for embeddings");t.text=e.prompt}return t}displayError(e){const t=e instanceof Error?e.message:String(e);this.logger.error("AI Gateway error:",{error:t,stack:e instanceof Error?e.stack:void 0}),new y.Notice(`AI Gateway error: ${t}`,5e3)}async makeRequest({modelId:e,messages:t,prompt:s,shouldStream:i=!1,type:r="text",onToken:a}){if(this.validateConfig(),!t&&!s)throw new Error("Either messages or prompt is required");const o=this.buildRequestBody({modelId:e,messages:t,prompt:s,shouldStream:i,type:r});return await this.apiService.post(this.getEndpointUrl(e),o,{Authorization:`Bearer ${this.cloudflareAiApiKey}`,"cf-aig-metadata":JSON.stringify({email:this.email}),"Content-Type":"application/json"},{stream:i,onToken:a})}async generateText(e,t){try{if(this.validateConfig(),!e.length)throw new Error("Messages are required");return await this.makeRequest({modelId:this.modelId,messages:e,shouldStream:!!t,type:"text",onToken:t||void 0})}catch(s){throw s instanceof Error&&this.logger.error(`Text generation failed: ${s.message}`),this.displayError(s),s}}async generateEmbedding(e){try{return this.validateConfig(),(await this.makeRequest({modelId:this.modelId,prompt:e,shouldStream:!1,type:"embedding"})).data}catch(t){throw this.displayError(t),t}}}const Ut="https://api.cloudflare.com/client/v4/accounts/",Ie=class Ee{constructor(e,t,s,i){this.logger=e,this.accountId=t,this.apiKey=s,this.indexName=i}validateConfig(){if(!this.accountId)throw new Error("Account ID is required");if(!this.apiKey)throw new Error("API key is required");if(!this.indexName)throw new Error("Index name is required")}getEndpointUrl(e){return`${Ut}${this.accountId}/vectorize/v2/${e}`}getContentType(e){return e==="json"?"application/json":"application/x-ndjson"}formatRequestBody(e,t){return t==="json"?JSON.stringify(e):e.map(s=>JSON.stringify(s)).join(`
`)}async delay(e){await new Promise(t=>setTimeout(t,e*Ee.RETRY_DELAY_MS))}displayError(e){const t=e instanceof Error?e.message:String(e);this.logger.error("Vectorize API error:",{error:t,stack:e instanceof Error?e.stack:void 0}),new y.Notice(`Vectorize API error: ${t}`,5e3)}async makeRequest(e,t,s,i=3,r){var a,o;for(let c=1;c<=i;c++)try{const u=this.formatRequestBody(s,r),l=this.getContentType(r),h=await y.request({url:this.getEndpointUrl(e),method:t,headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":l},body:u,throw:!1});let g;try{g=JSON.parse(h)}catch{throw new Error("Invalid JSON response from Vectorize API")}if(!g.success){const f=(a=g.errors)==null?void 0:a[0];if((f==null?void 0:f.message)===Ee.UPSTREAM_TIMEOUT_ERROR&&c<i){await this.delay(c);continue}throw new Error(((o=g.errors)==null?void 0:o.map(p=>p.message).join(", "))??"Unknown error")}return g.result??null}catch(u){if(c===i)throw this.displayError(u instanceof Error?u.message:String(u)),u;await this.delay(c)}return null}async upsertVectors(e){try{this.validateConfig();const t=e.map(i=>({...i,values:Array.isArray(i.values[0])?i.values[0]:i.values}));this.logger.debug("Formatted vectors:",t);const s=await this.makeRequest(`indexes/${this.indexName}/upsert`,"POST",t,3,"ndjson");return!!(s!=null&&s.mutationId)}catch(t){return this.displayError(`Failed to upsert vectors: ${t}`),!1}}async queryVectors(e){try{return this.validateConfig(),this.validateFilter(e.filter),await this.makeRequest(`indexes/${this.indexName}/query`,"POST",e,1,"json")}catch(t){return this.displayError(`Failed to query vectors: ${t}`),null}}validateFilter(e){if(!e)return;const t=["type","createdMonth","createdYear","modifiedMonth","modifiedYear","extension"],s=["$eq","$ne","$in","$nin","$lt","$lte","$gt","$gte"];for(const[i,r]of Object.entries(e)){if(!t.includes(i))throw new Error(`Invalid filter field: ${i}`);if(typeof r=="object"&&r!==null){const a=Object.keys(r);for(const c of a)if(!s.includes(c))throw new Error(`Invalid operator: ${c}`);if(a.some(c=>["$lt","$lte","$gt","$gte"].includes(c))&&a.some(u=>["$eq","$ne","$in","$nin"].includes(u)))throw new Error("Range queries cannot be combined with other operators")}}}async deleteVectorsByIds(e){try{this.validateConfig();const t=await this.makeRequest(`indexes/${this.indexName}/delete_by_ids`,"POST",{ids:e},3,"json");return!!(t!=null&&t.mutationId)}catch(t){return this.displayError(`Failed to delete vectors: ${t}`),!1}}};Ie.RETRY_DELAY_MS=1e3;Ie.UPSTREAM_TIMEOUT_ERROR="vectorize.upstream_timeout";let Ht=Ie;var j=(n=>(n[n.DEBUG=0]="DEBUG",n[n.INFO=1]="INFO",n[n.WARN=2]="WARN",n[n.ERROR=3]="ERROR",n))(j||{});class Wt{constructor(e={}){this.onConfigChange=i=>{this.logLevel=this.parseLogLevel(i.level||"error")};const s={...Ft(),...e};this.logLevel=this.parseLogLevel(s.level||"error"),this.useTimestamp=s.useTimestamp??!0,this.output=s.output||console,this.serviceName=s.serviceName,ve.addListener(i=>{this.logLevel=this.parseLogLevel(i.level||"error")})}parseLogLevel(e){const t=e.toLowerCase(),s={debug:j.DEBUG,info:j.INFO,warn:j.WARN,error:j.ERROR};if(!(t in s))throw new Error(`Invalid log level: ${e}`);return s[t]}formatLogMessage(e,t,s){const r=[this.useTimestamp?new Date().toISOString():"",this.serviceName,e].filter(Boolean).join(" | "),a=s?` ${JSON.stringify(s)}`:"";return`${r}: ${t}${a}`}setLogLevel(e){this.logLevel=this.parseLogLevel(e)}getLogLevel(){return j[this.logLevel].toLowerCase()}isLevelEnabled(e){return this.parseLogLevel(e)>=this.logLevel}debug(e,t){if(this.logLevel<=j.DEBUG){const s=this.formatLogMessage("debug",e,t);this.output.debug(s)}}info(e,t){if(this.logLevel<=j.INFO){const s=this.formatLogMessage("info",e,t);this.output.info(s)}}warn(e,t){if(this.logLevel<=j.WARN){const s=this.formatLogMessage("warn",e,t);this.output.warn(s)}}error(e,t){if(this.logLevel<=j.ERROR){const s=this.formatLogMessage("error",e,t);this.output.error(s)}}destroy(){ve.removeListener(this.onConfigChange)}}class Yt{constructor(e,t,s,i,r,a=[]){this.app=e,this.logger=t,this.vectorize=s,this.gateway=i,this.textEmbeddingsModelId=r,this.ignoredFolders=a,this.batchSize=5}async sync(){const e={successful:0,failed:0,errors:[]};this.validateServices();const s=this.app.vault.getMarkdownFiles().filter(r=>!this.isFileInIgnoredFolder(r)).filter(r=>r.extension==="md"),i=[];for(const r of s){const a=this.createVectorId(r.name),o=await this.getSyncState(a);!o||o.lastModified!==r.stat.mtime?i.push(r):e.successful++}new y.Notice(`Starting sync for ${i.length} files (${s.length-i.length} already up to date)`);for(let r=0;r<i.length;r+=this.batchSize){const a=i.slice(r,r+this.batchSize);await this.processBatch(a,e,r/this.batchSize+1,Math.ceil(i.length/this.batchSize))}return new y.Notice("Sync completed"),e}createVectorId(e){return btoa(e.slice(0,32))}isFileInIgnoredFolder(e){return this.ignoredFolders.some(t=>{const s=t.toLowerCase().replace(/\\/g,"/");return e.path.toLowerCase().replace(/\\/g,"/").startsWith(s+"/")})}validateServices(){if(!this.vectorize)throw new Error("Vectorize service not initialized");if(!this.gateway)throw new Error("AI Gateway service not initialized")}async syncFile(e,t){try{this.logger.debug(`Processing file: ${e.path}`);const s=await this.app.vault.cachedRead(e);if(!s.trim()){this.logger.warn(`Skipping empty file: ${e.path}`);return}const i=this.createVectorId(e.name),r=await this.getSyncState(i);if(r&&r.lastModified===e.stat.mtime){this.logger.debug(`File ${e.path} hasn't changed, skipping`),t.successful++;return}const a=await this.generateEmbeddings(s);if(!a){this.logger.warn(`Skipping file ${e.path} due to no vectors`);return}const o=this.getMetadata(e);await this.upsertVectors(i,a,o),await this.saveSyncState(i,e,a,o),t.successful++,this.logger.debug(`Successfully processed: ${e.path}`)}catch(s){t.failed++,t.errors.push({file:e.path,error:s instanceof Error?s.message:String(s)}),this.logger.error(`Failed to process ${e.path}:`,{error:s instanceof Error?s.message:String(s),stack:s instanceof Error?s.stack:void 0})}}async generateEmbeddings(e){var i,r,a;if(e.length>8192){this.logger.debug(`Content too large (${e.length}), chunking...`);const o=e.match(/[^.!?]+[.!?]+/g)||[e];let c="";const u=[];for(const l of o)if((c+l).length>8192){const h=await this.gateway.makeRequest({modelId:this.textEmbeddingsModelId,prompt:c,shouldStream:!1,type:"embedding"});(i=h==null?void 0:h.data)!=null&&i.length&&u.push(...h.data),c=l}else c+=l;if(c){const l=await this.gateway.makeRequest({modelId:this.textEmbeddingsModelId,prompt:c,shouldStream:!1,type:"embedding"});(r=l==null?void 0:l.data)!=null&&r.length&&u.push(...l.data)}return u}const s=await this.gateway.makeRequest({modelId:this.textEmbeddingsModelId,prompt:e,shouldStream:!1,type:"embedding"});if(!((a=s==null?void 0:s.data)!=null&&a.length))throw new Error("No vectors returned from AI Gateway");return s.data}getMetadata(e){const t={fileName:e.name,extension:e.extension};if(e.stat.ctime){const s=new Date(e.stat.ctime);t.created=e.stat.ctime,t.createdYear=s.getFullYear(),t.createdMonth=s.getMonth()+1}if(e.stat.mtime){const s=new Date(e.stat.mtime);t.modified=e.stat.mtime,t.modifiedYear=s.getFullYear(),t.modifiedMonth=s.getMonth()+1}return t}async upsertVectors(e,t,s){if(!await this.vectorize.upsertVectors([{id:e,values:t,metadata:s,namespace:this.app.vault.getName()}]))throw new Error("Failed to upsert vectors")}async ensureSyncDirectory(){const e=".cloudflare-ai/sync";await this.app.vault.adapter.exists(e)||await this.app.vault.adapter.mkdir(e)}async saveSyncState(e,t,s,i){const r={id:e,path:t.path,lastSync:Date.now(),lastModified:t.stat.mtime,metadata:i,vectors:s},a=`.cloudflare-ai/sync/${e}.json`;await this.app.vault.adapter.write(a,JSON.stringify(r,null,2))}async getSyncState(e){await this.ensureSyncDirectory();const t=`.cloudflare-ai/sync/${e}.json`;try{if(await this.app.vault.adapter.exists(t)){const s=await this.app.vault.adapter.read(t);return JSON.parse(s)}}catch(s){this.logger.warn(`Failed to read sync state for ${e}:`,{error:s instanceof Error?s.message:String(s),stack:s instanceof Error?s.stack:void 0})}return null}async processBatch(e,t,s,i){this.logger.debug(`Processing sync batch ${s}/${i}`),(await Promise.allSettled(e.map(a=>this.syncFile(a,t)))).forEach((a,o)=>{a.status==="rejected"&&this.logger.error(`Failed to sync file ${e[o].path}: ${a.reason}`)})}}class lt{constructor(e,t,s,i,r,a){this.app=e,this.logger=t,this.gateway=s,this.vectorize=i,this.settings=r,this.sync=a,this.messages=[],this.apiMessages=[],this.component=null,this.svelteComponents=[],this.isProcessing=!1,this.DEFAULT_SYSTEM_MESSAGE={role:"system",content:`You are a helpful AI assistant that analyzes notes and provides insights. Consider the context carefully before answering questions. The current date is ${new Date().toISOString().split("T")[0]}.`},this.validateServices(),this.contentEl=document.createElement("div")}validateServices(){var e;if(!this.gateway)throw new Error("Gateway not initialized");if(!this.vectorize)throw new Error("Vectorize not initialized");if(!((e=this.settings)!=null&&e.textEmbeddingsModelId))throw new Error("Text embeddings model ID not set")}async generateEmbedding(e){var t;try{this.logger.debug("Generating embedding",{text:e});const s=await this.gateway.makeRequest({modelId:this.settings.textEmbeddingsModelId,prompt:e,shouldStream:!1,type:"embedding"});return this.logger.debug("Embedding generated",{embedding:s}),((t=s==null?void 0:s.data)==null?void 0:t[0])??null}catch(s){return this.logger.error("Error generating embedding:",{error:s instanceof Error?s.message:String(s),stack:s instanceof Error?s.stack:void 0}),null}}async searchSimilarNotes(e,t){try{if(this.logger.debug("Searching for similar notes",{vector:e,filters:t}),!e)return null;const s=await this.vectorize.queryVectors({vector:e,topK:this.settings.topK,namespace:this.app.vault.getName(),filter:t});return this.logger.debug("Similar notes found",{result:s}),s}catch(s){return this.logger.error("Error searching vectors:",{error:s instanceof Error?s.message:String(s),stack:s instanceof Error?s.stack:void 0}),null}}async enrichMessageWithContext(e,t){var u;if(!((u=t==null?void 0:t.matches)!=null&&u.length))return e;this.logger.debug("Enriching message with context",{message:e,searchResults:t});const s=t.matches.filter(l=>l.score>=this.settings.minSimilarityScore).sort((l,h)=>h.score-l.score);if(!s.length)return this.logger.debug("No relevant matches found",{message:e,minSimilarityScore:this.settings.minSimilarityScore}),e;this.logger.debug("Relevant matches found",{relevantMatches:s});const i=s.map(async l=>{try{const h=await this.sync.getSyncState(l.id);if(!h)return null;const g=this.app.vault.getAbstractFileByPath(h==null?void 0:h.path);return!g||!(g instanceof y.TFile)?null:{content:await this.app.vault.cachedRead(g),score:l.score,path:g.path,link:`[[${g.path}]]`}}catch(h){return this.logger.error(`Error reading note ${l.id}:`,{error:h instanceof Error?h.message:String(h),stack:h instanceof Error?h.stack:void 0}),null}}),r=(await Promise.all(i)).filter(l=>l!==null);if(this.logger.debug("Contexts found",{contexts:r}),!r.length)return e;const a=r.map(l=>`[${Math.round(l.score*100)}% relevant from ${l.link}]:
${l.content}`).join(`

`);this.logger.debug("Formatted context",{formattedContext:a});const o=r.map(l=>l.link).join(", "),c=`Context from my notes:

${a}

Question: ${e}

Instructions: Please reference the source notes using their links (${o}) when they are relevant to your response. Format your response in markdown.`;return this.logger.debug("Prompt generated",{prompt:c}),c}async onSendMessage(e,t){try{if(!e.trim())return;this.isProcessing=!0;let s="";this.component&&this.component.$set({streamingContent:s}),this.updateComponent(),this.logger.debug("Sending message",{message:e,filters:t});const i={role:"user",content:e};this.messages.push(i);const r={role:"assistant",content:""};this.messages.push(r),this.updateComponent(),this.apiMessages.some(l=>l.role==="system")||this.apiMessages.push(this.DEFAULT_SYSTEM_MESSAGE);const a=await this.generateEmbedding(e),o=a?await this.searchSimilarNotes(a,t):null,c=await this.enrichMessageWithContext(e,o);this.apiMessages.push({...i,content:c});const u=await this.gateway.generateText(this.apiMessages,(l,h)=>{s=h?l:s+l,r.content=s,requestAnimationFrame(()=>{this.component&&this.component.$set({messages:[...this.messages],streamingContent:s})})});if(!u)throw new Error("No response from AI Gateway");r.content=u,this.apiMessages.push(r),this.updateComponent()}catch(s){this.logger.error("Error in message processing:",{error:s instanceof Error?s.message:String(s),stack:s instanceof Error?s.stack:void 0}),new y.Notice("Error generating response. Please try again."),this.messages=this.messages.slice(0,-1),this.apiMessages=this.apiMessages.slice(0,-1)}finally{this.isProcessing=!1,this.updateComponent()}}updateComponent(){this.component&&this.component.$set({messages:[...this.messages],isProcessing:this.isProcessing})}async onClearMessages(){this.messages=[],this.apiMessages=[],this.updateComponent()}async onCopyContent(e,t){try{await navigator.clipboard.writeText(e),new y.Notice(`Copied ${t} to clipboard`)}catch(s){this.logger.error("Error copying to clipboard:",{error:s instanceof Error?s.message:String(s),stack:s instanceof Error?s.stack:void 0}),new y.Notice(`Failed to copy ${t}`)}}cleanup(){this.svelteComponents.forEach(e=>{e&&typeof e.$destroy=="function"&&e.$destroy()})}initializeComponent(e,t){const s=new t({target:e,props:{messages:this.messages,isProcessing:this.isProcessing,onSendMessage:(i,r)=>this.onSendMessage(i,r),onClearMessages:()=>this.onClearMessages(),onCopyConversation:()=>this.onCopyContent(this.messages.map(i=>`${i.role}: ${i.content}`).join(`

`),"conversation"),onCopyMessage:i=>this.onCopyContent(i,"message")}});this.component=s,this.svelteComponents.push(s)}}function R(){}const Ne=n=>n;function Jt(n,e){for(const t in e)n[t]=e[t];return n}function ct(n){return n()}function De(){return Object.create(null)}function J(n){n.forEach(ct)}function he(n){return typeof n=="function"}function ee(n,e){return n!=n?e==e:n!==e||n&&typeof n=="object"||typeof n=="function"}function Qt(n){return Object.keys(n).length===0}function Xt(n,e,t,s){if(n){const i=ut(n,e,t,s);return n[0](i)}}function ut(n,e,t,s){return n[1]&&s?Jt(t.ctx.slice(),n[1](s(e))):t.ctx}function Zt(n,e,t,s){if(n[2]&&s){const i=n[2](s(t));if(e.dirty===void 0)return i;if(typeof i=="object"){const r=[],a=Math.max(e.dirty.length,i.length);for(let o=0;o<a;o+=1)r[o]=e.dirty[o]|i[o];return r}return e.dirty|i}return e.dirty}function es(n,e,t,s,i,r){if(i){const a=ut(e,t,s,r);n.p(a,i)}}function ts(n){if(n.ctx.length>32){const e=[],t=n.ctx.length/32;for(let s=0;s<t;s++)e[s]=-1;return e}return-1}function Ge(n){const e=typeof n=="string"&&n.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);return e?[parseFloat(e[1]),e[2]||"px"]:[n,"px"]}const ht=typeof window<"u";let gt=ht?()=>window.performance.now():()=>Date.now(),Re=ht?n=>requestAnimationFrame(n):R;const ce=new Set;function dt(n){ce.forEach(e=>{e.c(n)||(ce.delete(e),e.f())}),ce.size!==0&&Re(dt)}function ft(n){let e;return ce.size===0&&Re(dt),{promise:new Promise(t=>{ce.add(e={c:n,f:t})}),abort(){ce.delete(e)}}}function m(n,e){n.appendChild(e)}function mt(n){if(!n)return document;const e=n.getRootNode?n.getRootNode():n.ownerDocument;return e&&e.host?e:n.ownerDocument}function ss(n){const e=v("style");return e.textContent="/* empty */",ns(mt(n),e),e.sheet}function ns(n,e){return m(n.head||n,e),e.sheet}function M(n,e,t){n.insertBefore(e,t||null)}function x(n){n.parentNode&&n.parentNode.removeChild(n)}function Le(n,e){for(let t=0;t<n.length;t+=1)n[t]&&n[t].d(e)}function v(n){return document.createElement(n)}function G(n){return document.createElementNS("http://www.w3.org/2000/svg",n)}function ie(n){return document.createTextNode(n)}function N(){return ie(" ")}function Pe(){return ie("")}function K(n,e,t,s){return n.addEventListener(e,t,s),()=>n.removeEventListener(e,t,s)}function d(n,e,t){t==null?n.removeAttribute(e):n.getAttribute(e)!==t&&n.setAttribute(e,t)}function is(n){return Array.from(n.childNodes)}function pt(n,e){e=""+e,n.data!==e&&(n.data=e)}function U(n,e){n.value=e??""}function rs(n,e,{bubbles:t=!1,cancelable:s=!1}={}){return new CustomEvent(n,{detail:e,bubbles:t,cancelable:s})}class as{constructor(e=!1){Q(this,"is_svg",!1);Q(this,"e");Q(this,"n");Q(this,"t");Q(this,"a");this.is_svg=e,this.e=this.n=null}c(e){this.h(e)}m(e,t,s=null){this.e||(this.is_svg?this.e=G(t.nodeName):this.e=v(t.nodeType===11?"TEMPLATE":t.nodeName),this.t=t.tagName!=="TEMPLATE"?t:t.content,this.c(e)),this.i(s)}h(e){this.e.innerHTML=e,this.n=Array.from(this.e.nodeName==="TEMPLATE"?this.e.content.childNodes:this.e.childNodes)}i(e){for(let t=0;t<this.n.length;t+=1)M(this.t,this.n[t],e)}p(e){this.d(),this.h(e),this.i(this.a)}d(){this.n.forEach(x)}}const _e=new Map;let be=0;function os(n){let e=5381,t=n.length;for(;t--;)e=(e<<5)-e^n.charCodeAt(t);return e>>>0}function ls(n,e){const t={stylesheet:ss(e),rules:{}};return _e.set(n,t),t}function yt(n,e,t,s,i,r,a,o=0){const c=16.666/s;let u=`{
`;for(let C=0;C<=1;C+=c){const b=e+(t-e)*r(C);u+=C*100+`%{${a(b,1-b)}}
`}const l=u+`100% {${a(t,1-t)}}
}`,h=`__svelte_${os(l)}_${o}`,g=mt(n),{stylesheet:f,rules:p}=_e.get(g)||ls(g,n);p[h]||(p[h]=!0,f.insertRule(`@keyframes ${h} ${l}`,f.cssRules.length));const k=n.style.animation||"";return n.style.animation=`${k?`${k}, `:""}${h} ${s}ms linear ${i}ms 1 both`,be+=1,h}function ke(n,e){const t=(n.style.animation||"").split(", "),s=t.filter(e?r=>r.indexOf(e)<0:r=>r.indexOf("__svelte")===-1),i=t.length-s.length;i&&(n.style.animation=s.join(", "),be-=i,be||cs())}function cs(){Re(()=>{be||(_e.forEach(n=>{const{ownerNode:e}=n.stylesheet;e&&x(e)}),_e.clear())})}let fe;function de(n){fe=n}function wt(){if(!fe)throw new Error("Function called outside component initialization");return fe}function us(n){wt().$$.on_mount.push(n)}function hs(n){wt().$$.after_update.push(n)}const oe=[],me=[];let ue=[];const ze=[],gs=Promise.resolve();let Ae=!1;function ds(){Ae||(Ae=!0,gs.then(vt))}function ne(n){ue.push(n)}const Ce=new Set;let re=0;function vt(){if(re!==0)return;const n=fe;do{try{for(;re<oe.length;){const e=oe[re];re++,de(e),fs(e.$$)}}catch(e){throw oe.length=0,re=0,e}for(de(null),oe.length=0,re=0;me.length;)me.pop()();for(let e=0;e<ue.length;e+=1){const t=ue[e];Ce.has(t)||(Ce.add(t),t())}ue.length=0}while(oe.length);for(;ze.length;)ze.pop()();Ae=!1,Ce.clear(),de(n)}function fs(n){if(n.fragment!==null){n.update(),J(n.before_update);const e=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,e),n.after_update.forEach(ne)}}function ms(n){const e=[],t=[];ue.forEach(s=>n.indexOf(s)===-1?e.push(s):t.push(s)),t.forEach(s=>s()),ue=e}let ge;function _t(){return ge||(ge=Promise.resolve(),ge.then(()=>{ge=null})),ge}function Se(n,e,t){n.dispatchEvent(rs(`${e?"intro":"outro"}${t}`))}const we=new Set;let X;function xe(){X={r:0,c:[],p:X}}function Me(){X.r||J(X.c),X=X.p}function F(n,e){n&&n.i&&(we.delete(n),n.i(e))}function D(n,e,t,s){if(n&&n.o){if(we.has(n))return;we.add(n),X.c.push(()=>{we.delete(n),s&&(t&&n.d(1),s())}),n.o(e)}else s&&s()}const bt={duration:0};function St(n,e,t){const s={direction:"in"};let i=e(n,t,s),r=!1,a,o,c=0;function u(){a&&ke(n,a)}function l(){const{delay:g=0,duration:f=300,easing:p=Ne,tick:k=R,css:C}=i||bt;C&&(a=yt(n,0,1,f,g,p,C,c++)),k(0,1);const b=gt()+g,L=b+f;o&&o.abort(),r=!0,ne(()=>Se(n,!0,"start")),o=ft($=>{if(r){if($>=L)return k(1,0),Se(n,!0,"end"),u(),r=!1;if($>=b){const z=p(($-b)/f);k(z,1-z)}}return r})}let h=!1;return{start(){h||(h=!0,ke(n),he(i)?(i=i(s),_t().then(l)):l())},invalidate(){h=!1},end(){r&&(u(),r=!1)}}}function Ct(n,e,t){const s={direction:"out"};let i=e(n,t,s),r=!0,a;const o=X;o.r+=1;let c;function u(){const{delay:l=0,duration:h=300,easing:g=Ne,tick:f=R,css:p}=i||bt;p&&(a=yt(n,1,0,h,l,g,p));const k=gt()+l,C=k+h;ne(()=>Se(n,!1,"start")),"inert"in n&&(c=n.inert,n.inert=!0),ft(b=>{if(r){if(b>=C)return f(0,1),Se(n,!1,"end"),--o.r||J(o.c),!1;if(b>=k){const L=g((b-k)/h);f(1-L,L)}}return r})}return he(i)?_t().then(()=>{i=i(s),u()}):u(),{end(l){l&&"inert"in n&&(n.inert=c),l&&i.tick&&i.tick(1,0),r&&(a&&ke(n,a),r=!1)}}}function Z(n){return(n==null?void 0:n.length)!==void 0?n:Array.from(n)}function ps(n,e){D(n,1,1,()=>{e.delete(n.key)})}function ys(n,e,t,s,i,r,a,o,c,u,l,h){let g=n.length,f=r.length,p=g;const k={};for(;p--;)k[n[p].key]=p;const C=[],b=new Map,L=new Map,$=[];for(p=f;p--;){const _=h(i,r,p),T=t(_);let w=a.get(T);w?s&&$.push(()=>w.p(_,e)):(w=u(T,_),w.c()),b.set(T,C[p]=w),T in k&&L.set(T,Math.abs(p-k[T]))}const z=new Set,B=new Set;function V(_){F(_,1),_.m(o,l),a.set(_.key,_),l=_.first,f--}for(;g&&f;){const _=C[f-1],T=n[g-1],w=_.key,E=T.key;_===T?(l=_.first,g--,f--):b.has(E)?!a.has(w)||z.has(w)?V(_):B.has(E)?g--:L.get(w)>L.get(E)?(B.add(w),V(_)):(z.add(E),g--):(c(T,a),g--)}for(;g--;){const _=n[g];b.has(_.key)||c(_,a)}for(;f;)V(C[f-1]);return J($),C}function Y(n){n&&n.c()}function H(n,e,t){const{fragment:s,after_update:i}=n.$$;s&&s.m(e,t),ne(()=>{const r=n.$$.on_mount.map(ct).filter(he);n.$$.on_destroy?n.$$.on_destroy.push(...r):J(r),n.$$.on_mount=[]}),i.forEach(ne)}function W(n,e){const t=n.$$;t.fragment!==null&&(ms(t.after_update),J(t.on_destroy),t.fragment&&t.fragment.d(e),t.on_destroy=t.fragment=null,t.ctx=[])}function ws(n,e){n.$$.dirty[0]===-1&&(oe.push(n),ds(),n.$$.dirty.fill(0)),n.$$.dirty[e/31|0]|=1<<e%31}function te(n,e,t,s,i,r,a=null,o=[-1]){const c=fe;de(n);const u=n.$$={fragment:null,ctx:[],props:r,update:R,not_equal:i,bound:De(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(c?c.$$.context:[])),callbacks:De(),dirty:o,skip_bound:!1,root:e.target||c.$$.root};a&&a(u.root);let l=!1;if(u.ctx=t?t(n,e.props||{},(h,g,...f)=>{const p=f.length?f[0]:g;return u.ctx&&i(u.ctx[h],u.ctx[h]=p)&&(!u.skip_bound&&u.bound[h]&&u.bound[h](p),l&&ws(n,h)),g}):[],u.update(),l=!0,J(u.before_update),u.fragment=s?s(u.ctx):!1,e.target){if(e.hydrate){const h=is(e.target);u.fragment&&u.fragment.l(h),h.forEach(x)}else u.fragment&&u.fragment.c();e.intro&&F(n.$$.fragment),H(n,e.target,e.anchor),vt()}de(c)}class se{constructor(){Q(this,"$$");Q(this,"$$set")}$destroy(){W(this,1),this.$destroy=R}$on(e,t){if(!he(t))return R;const s=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return s.push(t),()=>{const i=s.indexOf(t);i!==-1&&s.splice(i,1)}}$set(e){this.$$set&&!Qt(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const vs="4";typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(vs);function _s(n){const e=n-1;return e*e*e+1}function Te(n,{delay:e=0,duration:t=400,easing:s=Ne}={}){const i=+getComputedStyle(n).opacity;return{delay:e,duration:t,easing:s,css:r=>`opacity: ${r*i}`}}function bs(n,{delay:e=0,duration:t=400,easing:s=_s,x:i=0,y:r=0,opacity:a=0}={}){const o=getComputedStyle(n),c=+o.opacity,u=o.transform==="none"?"":o.transform,l=c*(1-a),[h,g]=Ge(i),[f,p]=Ge(r);return{delay:e,duration:t,easing:s,css:(k,C)=>`
			transform: ${u} translate(${(1-k)*h}${g}, ${(1-k)*f}${p});
			opacity: ${c-l*C}`}}function Be(n,e=!1,t={p:"text-base"}){if(!n)return n;const s=c=>c.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"),i=`underline text-${e?"muted":"primary"}-foreground inline font-bold p-0 transition-colors hover:underline hover:outline-none decoration-1 decoration-skip-ink-none underline-offset-[0.25em] hover:decoration-2`,r=[];n=n.replace(/```([\s\S]*?)```/g,(c,u)=>(r.push(u),`{{CODEBLOCK${r.length-1}}}`));const a=[];n=n.replace(/`([^`]+)`/g,(c,u)=>(a.push(u),`{{INLINECODE${a.length-1}}}`));let o=n.replace(/\\\\/g,"\\").replace(/\\n/g,`
`).replace(/<summary>/g,"**Summary:** ").replace(/<\/summary>/g,"").replace(/<questions>/g,"**Questions:** ").replace(/<\/questions>/g,"").replace(/<question>/g,"").replace(/<\/question>/g,"").replace(/<answer>/g,"").replace(/<\/answer>/g,"").replace(/<prompt_analysis>/g,"**Analysis:** ").replace(/<\/prompt_analysis>/g,"").replace(/<analysis>/g,"**Analysis:** ").replace(/<\/analysis>/g,"").replace(/<thought>/g,"**Thought:** ").replace(/<\/thought>/g,"").replace(/<action>/g,"**Action:** ").replace(/<\/action>/g,"").replace(/<unclear_parts>/g,"**Unsure about:** ").replace(/<\/unclear_parts>/g,"").replace(/<key_elements>/g,"**Key Elements:** ").replace(/<\/key_elements>/g,"").replace(/<key_elements_missing>/g,"**Key Elements Missing:** ").replace(/<\/key_elements_missing>/g,"").replace(/<suggestions>/g,"**Suggestions:** ").replace(/<\/suggestions>/g,"").replace(/<suggestion>/g,"").replace(/<\/suggestion>/g,"").replace(/<revised_prompt>/g,"**Revised Prompt:** ").replace(/<\/revised_prompt>/g,"").replace(/<problem_breakdown>/g,"**Problem Breakdown:** ").replace(/<\/problem_breakdown>/g,"");return o=s(o).replace(/^### (.*?)$/gm,`<h3>$1</h3>
`).replace(/^## (.*?)$/gm,`<h2>$1</h2>
`).replace(/^# (.*?)$/gm,`<h1>$1</h1>
`).replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/__(.*?)__/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/_(.*?)_/g,"<em>$1</em>").replace(/!\[(.*?)\]\((.*?)\)/g,'<img src="$2" alt="$1" class="rounded-lg max-w-full h-auto my-4" loading="lazy" />').replace(/\[([^\]]+)\]\(([^)]+)\)/g,`<a href="$2" target="_blank" rel="noopener noreferrer" class="${i}">$1</a>`).replace(/\[\[(.*?)\]\]/g,`<a href="$1" class="internal-link ${i}">$1</a>`).replace(/^(\s*[-*+]\s+.*(?:\n(?!\s*[-*+]|\s*\d+\.).*)*)+/gm,c=>`<ul class="list-disc">${c.split(`
`).map(l=>{const h=l.replace(/^\s*[-*+]\s+/,"").trim();return h?`<li>${h}</li>`:""}).filter(Boolean).join(`
`)}</ul>`).replace(/^(\s*\d+\.\s+.*(?:\n(?!\s*[-*+]|\s*\d+\.).*)*)+/gm,c=>`<ol class="list-decimal">${c.split(`
`).map(l=>{const h=l.replace(/^\s*\d+\.\s+/,"").trim();return h?`<li>${h}</li>`:""}).filter(Boolean).join(`
`)}</ol>`).replace(/^(>\s+.*(?:\n(?!>).*)*)+/gm,c=>`<blockquote>${c.replace(/^>\s+/gm,"")}</blockquote>`).replace(/^(?:---|\*\*\*|___)\s*$/gm,"<hr>").replace(/^(?!<[houl]|<bl|<hr)[^\n]+(?:\n(?!<[houl]|<bl|<hr)[^\n]+)*/gm,c=>`<p class="${t.p||"text-base"}">${c.replace(/\n/g,"<br />")}</p>`),o=o.replace(/{{CODEBLOCK(\d+)}}/g,(c,u)=>{var C;const l=r[parseInt(u)];if(!l)return"";const h=l.split(`
`),g=((C=h[0])==null?void 0:C.trim())||"",f=/^[a-zA-Z0-9]+$/.test(g),p=f?g:"",k=f?h.slice(1).join(`
`).trim():l;return`<pre><code${p?` class="language-${p}"`:""}>${s(k)}</code></pre>`}),o=o.replace(/{{INLINECODE(\d+)}}/g,(c,u)=>{const l=a[parseInt(u)];return l?`<code>${s(l)}</code>`:""}),o}function Ss(n){let e,t,s,i,r,a;return{c(){e=G("svg"),t=G("rect"),s=G("path"),i=G("path"),r=G("path"),a=G("path"),d(t,"width","8"),d(t,"height","4"),d(t,"x","8"),d(t,"y","2"),d(t,"rx","1"),d(t,"ry","1"),d(s,"d","M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2"),d(i,"d","M16 4h2a2 2 0 0 1 2 2v4"),d(r,"d","M21 14H11"),d(a,"d","m15 10-4 4 4 4"),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"width","24"),d(e,"height","24"),d(e,"viewBox","0 0 24 24"),d(e,"fill","none"),d(e,"stroke","currentColor"),d(e,"stroke-width","2"),d(e,"stroke-linecap","round"),d(e,"stroke-linejoin","round"),d(e,"class","lucide lucide-clipboard-copy")},m(o,c){M(o,e,c),m(e,t),m(e,s),m(e,i),m(e,r),m(e,a)},p:R,i:R,o:R,d(o){o&&x(e)}}}class Et extends se{constructor(e){super(),te(this,e,null,Ss,ee,{})}}function Oe(n,e,t){const s=n.slice();return s[9]=e[t],s[11]=t,s}function Ve(n){let e;return{c(){e=v("div"),e.innerHTML='<h3 class="svelte-bnkcb1">Welcome to the Chat 👋</h3> <p>Ask me anything about your notes, or just general questions.</p>',d(e,"class","welcome-message svelte-bnkcb1")},m(t,s){M(t,e,s)},d(t){t&&x(e)}}}function qe(n){let e;function t(r,a){return r[3]?Es:Cs}let s=t(n),i=s(n);return{c(){i.c(),e=Pe()},m(r,a){i.m(r,a),M(r,e,a)},p(r,a){s!==(s=t(r))&&(i.d(1),i=s(r),i&&(i.c(),i.m(e.parentNode,e)))},d(r){r&&x(e),i.d(r)}}}function Cs(n){let e;return{c(){e=v("div"),e.innerHTML='<span class="svelte-bnkcb1"></span> <span class="svelte-bnkcb1"></span> <span class="svelte-bnkcb1"></span>',d(e,"class","typing-indicator svelte-bnkcb1")},m(t,s){M(t,e,s)},d(t){t&&x(e)}}}function Es(n){let e;return{c(){e=v("span"),e.textContent="▋",d(e,"class","cursor svelte-bnkcb1")},m(t,s){M(t,e,s)},d(t){t&&x(e)}}}function je(n,e){let t,s,i,r,a=e[9].role==="assistant"?"🤖":"👤",o,c,u,l,h,g=Be(e[9].role==="assistant"&&e[11]===e[0].length-1&&e[2]?e[3]:e[9].content)+"",f,p,k,C,b,L,$,z,B,V,_,T,w,E,I=e[9].role==="assistant"&&e[11]===e[0].length-1&&e[2]&&qe(e);b=new Et({});function P(){return e[6](e[9])}return{key:n,first:null,c(){t=v("div"),s=v("div"),i=v("div"),r=v("span"),o=ie(a),c=N(),u=v("div"),l=v("div"),h=new as(!1),f=N(),I&&I.c(),p=N(),k=v("div"),C=v("button"),Y(b.$$.fragment),L=N(),$=v("span"),$.textContent="Copy message",z=N(),d(r,"class","role-indicator svelte-bnkcb1"),d(r,"aria-hidden","true"),h.a=f,d(l,"class","message-content-inner"),d($,"class","sr-only svelte-bnkcb1"),d(C,"class","copy-button svelte-bnkcb1"),d(C,"aria-label","Copy message"),d(k,"class","message-actions"),d(u,"class","message-content svelte-bnkcb1"),d(i,"class","message-content-wrapper svelte-bnkcb1"),d(s,"class","message svelte-bnkcb1"),d(t,"class",B="message-wrapper "+e[9].role+" svelte-bnkcb1"),d(t,"role","article"),this.first=t},m(S,q){M(S,t,q),m(t,s),m(s,i),m(i,r),m(r,o),m(i,c),m(i,u),m(u,l),h.m(g,l),m(l,f),I&&I.m(l,null),m(u,p),m(u,k),m(k,C),H(b,C,null),m(C,L),m(C,$),m(t,z),T=!0,w||(E=K(C,"click",P),w=!0)},p(S,q){e=S,(!T||q&1)&&a!==(a=e[9].role==="assistant"?"🤖":"👤")&&pt(o,a),(!T||q&13)&&g!==(g=Be(e[9].role==="assistant"&&e[11]===e[0].length-1&&e[2]?e[3]:e[9].content)+"")&&h.p(g),e[9].role==="assistant"&&e[11]===e[0].length-1&&e[2]?I?I.p(e,q):(I=qe(e),I.c(),I.m(l,null)):I&&(I.d(1),I=null),(!T||q&1&&B!==(B="message-wrapper "+e[9].role+" svelte-bnkcb1"))&&d(t,"class",B)},i(S){T||(F(b.$$.fragment,S),S&&ne(()=>{T&&(_&&_.end(1),V=St(t,bs,{y:20,duration:300}),V.start())}),T=!0)},o(S){D(b.$$.fragment,S),V&&V.invalidate(),S&&(_=Ct(t,Te,{duration:200})),T=!1},d(S){S&&x(t),I&&I.d(),W(b),S&&_&&_.end(),w=!1,E()}}}function ks(n){let e,t,s=[],i=new Map,r,a,o,c=n[0].length<=0&&Ve(),u=Z(n[0].filter(Ke));const l=h=>h[11];for(let h=0;h<u.length;h+=1){let g=Oe(n,u,h),f=l(g);i.set(f,s[h]=je(f,g))}return{c(){c&&c.c(),e=N(),t=v("div");for(let h=0;h<s.length;h+=1)s[h].c();d(t,"class","messages svelte-bnkcb1"),d(t,"role","log"),d(t,"aria-live","polite")},m(h,g){c&&c.m(h,g),M(h,e,g),M(h,t,g);for(let f=0;f<s.length;f+=1)s[f]&&s[f].m(t,null);n[7](t),r=!0,a||(o=K(t,"scroll",n[5]),a=!0)},p(h,[g]){h[0].length<=0?c||(c=Ve(),c.c(),c.m(e.parentNode,e)):c&&(c.d(1),c=null),g&15&&(u=Z(h[0].filter(Ke)),xe(),s=ys(s,g,l,1,h,u,i,t,ps,je,null,Oe),Me())},i(h){if(!r){for(let g=0;g<u.length;g+=1)F(s[g]);r=!0}},o(h){for(let g=0;g<s.length;g+=1)D(s[g]);r=!1},d(h){h&&(x(e),x(t)),c&&c.d(h);for(let g=0;g<s.length;g+=1)s[g].d();n[7](null),a=!1,o()}}}const Ke=n=>n.role!=="system";function As(n,e,t){let{messages:s=[]}=e,{onCopyMessage:i}=e,{isProcessing:r=!1}=e,{streamingContent:a=""}=e,o,c=!1;function u(){if(!o)return;const{scrollTop:g,scrollHeight:f,clientHeight:p}=o;f-g-p<10?c=!1:c=!0}hs(()=>{o&&!c&&o.scrollTo({top:o.scrollHeight,behavior:"instant"})});const l=g=>i(g.content);function h(g){me[g?"unshift":"push"](()=>{o=g,t(4,o)})}return n.$$set=g=>{"messages"in g&&t(0,s=g.messages),"onCopyMessage"in g&&t(1,i=g.onCopyMessage),"isProcessing"in g&&t(2,r=g.isProcessing),"streamingContent"in g&&t(3,a=g.streamingContent)},[s,i,r,a,o,u,l,h]}class kt extends se{constructor(e){super(),te(this,e,As,ks,ee,{messages:0,onCopyMessage:1,isProcessing:2,streamingContent:3})}}function xs(n){let e,t,s;return{c(){e=G("svg"),t=G("path"),s=G("path"),d(t,"d","M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z"),d(s,"d","m21.854 2.147-10.94 10.939"),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"width","24"),d(e,"height","24"),d(e,"viewBox","0 0 24 24"),d(e,"fill","none"),d(e,"stroke","currentColor"),d(e,"stroke-width","2"),d(e,"stroke-linecap","round"),d(e,"stroke-linejoin","round"),d(e,"class","lucide lucide-send")},m(i,r){M(i,e,r),m(e,t),m(e,s)},p:R,i:R,o:R,d(i){i&&x(e)}}}class Ms extends se{constructor(e){super(),te(this,e,null,xs,ee,{})}}function Ts(n){let e,t;return{c(){e=G("svg"),t=G("polygon"),d(t,"points","22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"width","24"),d(e,"height","24"),d(e,"viewBox","0 0 24 24"),d(e,"fill","none"),d(e,"stroke","currentColor"),d(e,"stroke-width","2"),d(e,"stroke-linecap","round"),d(e,"stroke-linejoin","round"),d(e,"class","lucide lucide-filter")},m(s,i){M(s,e,i),m(e,t)},p:R,i:R,o:R,d(s){s&&x(e)}}}class Is extends se{constructor(e){super(),te(this,e,null,Ts,ee,{})}}function Ns(n){let e,t,s,i;return{c(){e=G("svg"),t=G("path"),s=G("path"),i=G("path"),d(t,"d","m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21"),d(s,"d","M22 21H7"),d(i,"d","m5 11 9 9"),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"width","24"),d(e,"height","24"),d(e,"viewBox","0 0 24 24"),d(e,"fill","none"),d(e,"stroke","currentColor"),d(e,"stroke-width","2"),d(e,"stroke-linecap","round"),d(e,"stroke-linejoin","round"),d(e,"class","lucide lucide-eraser")},m(r,a){M(r,e,a),m(e,t),m(e,s),m(e,i)},p:R,i:R,o:R,d(r){r&&x(e)}}}class Rs extends se{constructor(e){super(),te(this,e,null,Ns,ee,{})}}function Ue(n,e,t){const s=n.slice();return s[22]=e[t],s}function He(n,e,t){const s=n.slice();return s[28]=e[t],s}function We(n,e,t){const s=n.slice();return s[25]=e[t],s}const Ls=n=>({}),Ye=n=>({});function Je(n){let e,t,s,i,r,a,o,c,u,l,h,g;return t=new Rs({}),o=new Et({}),{c(){e=v("button"),Y(t.$$.fragment),s=N(),i=v("span"),i.textContent="Clear Chat",r=N(),a=v("button"),Y(o.$$.fragment),c=N(),u=v("span"),u.textContent="Copy Conversation",d(i,"class","sr-only"),d(e,"class","action-button svelte-17n7afo"),d(e,"aria-label","Clear Chat"),d(u,"class","sr-only"),d(a,"class","action-button svelte-17n7afo"),d(a,"aria-label","Copy Conversation")},m(f,p){M(f,e,p),H(t,e,null),m(e,s),m(e,i),M(f,r,p),M(f,a,p),H(o,a,null),m(a,c),m(a,u),l=!0,h||(g=[K(e,"click",function(){he(n[2])&&n[2].apply(this,arguments)}),K(a,"click",function(){he(n[3])&&n[3].apply(this,arguments)})],h=!0)},p(f,p){n=f},i(f){l||(F(t.$$.fragment,f),F(o.$$.fragment,f),l=!0)},o(f){D(t.$$.fragment,f),D(o.$$.fragment,f),l=!1},d(f){f&&(x(e),x(r),x(a)),W(t),W(o),h=!1,J(g)}}}function Qe(n){let e,t,s,i,r,a,o,c=Z(n[8]),u=[];for(let l=0;l<c.length;l+=1)u[l]=et(Ue(n,c,l));return{c(){e=v("div"),t=v("form");for(let l=0;l<u.length;l+=1)u[l].c();d(e,"class","filters svelte-17n7afo")},m(l,h){M(l,e,h),m(e,t);for(let g=0;g<u.length;g+=1)u[g]&&u[g].m(t,null);r=!0,a||(o=K(t,"change",n[12]),a=!0)},p(l,h){if(h&256){c=Z(l[8]);let g;for(g=0;g<c.length;g+=1){const f=Ue(l,c,g);u[g]?u[g].p(f,h):(u[g]=et(f),u[g].c(),u[g].m(t,null))}for(;g<u.length;g+=1)u[g].d(1);u.length=c.length}},i(l){r||(l&&ne(()=>{r&&(i&&i.end(1),s=St(e,Te,{duration:200}),s.start())}),r=!0)},o(l){s&&s.invalidate(),l&&(i=Ct(e,Te,{duration:200})),r=!1},d(l){l&&x(e),Le(u,l),l&&i&&i.end(),a=!1,o()}}}function Ps(n){let e,t,s;return{c(){e=v("select"),t=v("option"),t.textContent="Any",s=v("option"),s.textContent="Markdown",t.__value="",U(t,t.__value),s.__value="md",U(s,s.__value),d(e,"name",n[22].field),d(e,"class","full-width svelte-17n7afo"),d(e,"aria-label","Filter value")},m(i,r){M(i,e,r),m(e,t),m(e,s)},p:R,d(i){i&&x(e)}}}function Fs(n){let e,t,s,i,r,a,o,c;function u(g,f){return g[22].field.includes("Year")?Ds:$s}let h=u(n)(n);return{c(){e=v("div"),t=v("select"),s=v("option"),s.textContent="=",i=v("option"),i.textContent=">=",r=v("option"),r.textContent="<=",a=N(),o=v("select"),c=v("option"),c.textContent="Any",h.c(),s.__value="$eq",U(s,s.__value),i.__value="$gte",U(i,i.__value),r.__value="$lte",U(r,r.__value),d(t,"name",`${n[22].field}-op`),d(t,"class","operator-select svelte-17n7afo"),d(t,"aria-label","Filter operator"),c.__value="",U(c,c.__value),d(o,"name",n[22].field),d(o,"class","value-select svelte-17n7afo"),d(o,"aria-label","Filter value"),d(e,"class","filter-inputs svelte-17n7afo")},m(g,f){M(g,e,f),m(e,t),m(t,s),m(t,i),m(t,r),m(e,a),m(e,o),m(o,c),h.m(o,null)},p(g,f){h.p(g,f)},d(g){g&&x(e),h.d()}}}function $s(n){let e,t=Z(Array.from({length:12},tt)),s=[];for(let i=0;i<t.length;i+=1)s[i]=Xe(He(n,t,i));return{c(){for(let i=0;i<s.length;i+=1)s[i].c();e=Pe()},m(i,r){for(let a=0;a<s.length;a+=1)s[a]&&s[a].m(i,r);M(i,e,r)},p(i,r){if(r&0){t=Z(Array.from({length:12},tt));let a;for(a=0;a<t.length;a+=1){const o=He(i,t,a);s[a]?s[a].p(o,r):(s[a]=Xe(o),s[a].c(),s[a].m(e.parentNode,e))}for(;a<s.length;a+=1)s[a].d(1);s.length=t.length}},d(i){i&&x(e),Le(s,i)}}}function Ds(n){let e,t=Z(Array.from({length:5},n[20])),s=[];for(let i=0;i<t.length;i+=1)s[i]=Ze(We(n,t,i));return{c(){for(let i=0;i<s.length;i+=1)s[i].c();e=Pe()},m(i,r){for(let a=0;a<s.length;a+=1)s[a]&&s[a].m(i,r);M(i,e,r)},p(i,r){if(r&0){t=Z(Array.from({length:5},i[20]));let a;for(a=0;a<t.length;a+=1){const o=We(i,t,a);s[a]?s[a].p(o,r):(s[a]=Ze(o),s[a].c(),s[a].m(e.parentNode,e))}for(;a<s.length;a+=1)s[a].d(1);s.length=t.length}},d(i){i&&x(e),Le(s,i)}}}function Xe(n){let e,t=n[28]+"",s;return{c(){e=v("option"),s=ie(t),e.__value=n[28],U(e,e.__value)},m(i,r){M(i,e,r),m(e,s)},p:R,d(i){i&&x(e)}}}function Ze(n){let e,t=n[25]+"",s;return{c(){e=v("option"),s=ie(t),e.__value=n[25],U(e,e.__value)},m(i,r){M(i,e,r),m(e,s)},p:R,d(i){i&&x(e)}}}function et(n){let e,t,s=n[22].label+"",i,r,a;function o(l,h){return l[22].type==="number"?Fs:Ps}let u=o(n)(n);return{c(){e=v("div"),t=v("label"),i=ie(s),r=N(),u.c(),a=N(),d(t,"for",n[22].field),d(e,"class","filter-row svelte-17n7afo")},m(l,h){M(l,e,h),m(e,t),m(t,i),m(e,r),u.m(e,null),m(e,a)},p(l,h){u.p(l,h)},d(l){l&&x(e),u.d()}}}function Gs(n){var q;let e,t,s,i,r,a,o,c,u,l,h=n[6]?"Hide RAG Filters":"Show RAG Filters",g,f,p,k,C,b,L,$,z,B,V,_,T,w;c=new Is({});let E=((q=n[1])==null?void 0:q.length)>0&&Je(n);const I=n[15]["additional-actions"],P=Xt(I,n,n[14],Ye);L=new Ms({});let S=n[6]&&Qe(n);return{c(){e=v("div"),t=v("div"),s=v("textarea"),i=N(),r=v("div"),a=v("div"),o=v("button"),Y(c.$$.fragment),u=N(),l=v("span"),g=ie(h),p=N(),E&&E.c(),k=N(),P&&P.c(),C=N(),b=v("button"),Y(L.$$.fragment),$=N(),z=v("span"),z.textContent="Send",V=N(),S&&S.c(),d(s,"placeholder","Type your message here..."),s.disabled=n[0],d(s,"rows","1"),d(s,"aria-label","Message input"),d(s,"class","svelte-17n7afo"),d(l,"class","sr-only"),d(o,"class","action-button svelte-17n7afo"),d(o,"aria-expanded",n[6]),d(o,"aria-label",f=n[6]?"Hide RAG Filters":"Show RAG Filters"),d(a,"class","left-actions svelte-17n7afo"),d(z,"class","sr-only"),d(b,"class","send-button svelte-17n7afo"),b.disabled=B=n[0]||!n[4].trim(),d(b,"aria-label","Send message"),d(r,"class","actions-container svelte-17n7afo"),d(t,"class","input-container svelte-17n7afo"),d(e,"class","input-wrapper svelte-17n7afo")},m(A,O){M(A,e,O),m(e,t),m(t,s),n[16](s),U(s,n[4]),m(t,i),m(t,r),m(r,a),m(a,o),H(c,o,null),m(o,u),m(o,l),m(l,g),m(a,p),E&&E.m(a,null),m(a,k),P&&P.m(a,null),m(r,C),m(r,b),H(L,b,null),m(b,$),m(b,z),n[19](t),m(e,V),S&&S.m(e,null),_=!0,T||(w=[K(s,"input",n[17]),K(s,"input",n[9]),K(s,"keydown",n[11]),K(o,"click",n[18]),K(b,"click",n[10])],T=!0)},p(A,[O]){var Fe;(!_||O&1)&&(s.disabled=A[0]),O&16&&U(s,A[4]),(!_||O&64)&&h!==(h=A[6]?"Hide RAG Filters":"Show RAG Filters")&&pt(g,h),(!_||O&64)&&d(o,"aria-expanded",A[6]),(!_||O&64&&f!==(f=A[6]?"Hide RAG Filters":"Show RAG Filters"))&&d(o,"aria-label",f),((Fe=A[1])==null?void 0:Fe.length)>0?E?(E.p(A,O),O&2&&F(E,1)):(E=Je(A),E.c(),F(E,1),E.m(a,k)):E&&(xe(),D(E,1,1,()=>{E=null}),Me()),P&&P.p&&(!_||O&16384)&&es(P,I,A,A[14],_?Zt(I,A[14],O,Ls):ts(A[14]),Ye),(!_||O&17&&B!==(B=A[0]||!A[4].trim()))&&(b.disabled=B),A[6]?S?(S.p(A,O),O&64&&F(S,1)):(S=Qe(A),S.c(),F(S,1),S.m(e,null)):S&&(xe(),D(S,1,1,()=>{S=null}),Me())},i(A){_||(F(c.$$.fragment,A),F(E),F(P,A),F(L.$$.fragment,A),F(S),_=!0)},o(A){D(c.$$.fragment,A),D(E),D(P,A),D(L.$$.fragment,A),D(S),_=!1},d(A){A&&x(e),n[16](null),W(c),E&&E.d(),P&&P.d(A),W(L),n[19](null),S&&S.d(),T=!1,J(w)}}}const tt=(n,e)=>e+1;function zs(n,e,t){let{$$slots:s={},$$scope:i}=e,{isProcessing:r=!1}=e,{messages:a=[]}=e,{onSendMessage:o}=e,{onClearMessages:c}=e,{onCopyConversation:u}=e,l="",h,g={},f=!1,p;const k=[{field:"createdYear",type:"number",label:"Created Year"},{field:"createdMonth",type:"number",label:"Created Month"},{field:"modifiedYear",type:"number",label:"Modified Year"},{field:"modifiedMonth",type:"number",label:"Modified Month"},{field:"extension",type:"string",label:"File Type"}],C=()=>{if(h){t(5,h.style.height="24px",h);const w=Math.min(Math.max(h.scrollHeight,24),200);t(5,h.style.height=`${w}px`,h),p&&t(7,p.style.height=`${w+66}px`,p)}};us(()=>{h&&(t(5,h.style.height="24px",h),t(7,p.style.height="90px",p),C())});const b=async()=>{if(l.trim()&&!r){const w=l.trim();t(4,l=""),t(5,h.style.height="24px",h),t(7,p.style.height="90px",p);try{await o(w,g)}catch(E){console.error("Error sending message:",E),t(4,l=w)}}},L=w=>{w.key==="Enter"&&!w.shiftKey&&(w.preventDefault(),b())};function $(w){const E=w.target,I=new FormData(E.closest("form")||E);k.forEach(P=>{const S=I.get(P.field);if(!S){delete g[P.field];return}if(P.type==="number"){const q=I.get(`${P.field}-op`)||"$eq";g[P.field]={[q]:Number(S)}}else g[P.field]={$eq:String(S)}})}function z(w){me[w?"unshift":"push"](()=>{h=w,t(5,h)})}function B(){l=this.value,t(4,l)}const V=()=>t(6,f=!f);function _(w){me[w?"unshift":"push"](()=>{p=w,t(7,p)})}const T=(w,E)=>new Date().getFullYear()-E;return n.$$set=w=>{"isProcessing"in w&&t(0,r=w.isProcessing),"messages"in w&&t(1,a=w.messages),"onSendMessage"in w&&t(13,o=w.onSendMessage),"onClearMessages"in w&&t(2,c=w.onClearMessages),"onCopyConversation"in w&&t(3,u=w.onCopyConversation),"$$scope"in w&&t(14,i=w.$$scope)},[r,a,c,u,l,h,f,p,k,C,b,L,$,o,i,s,z,B,V,_,T]}class At extends se{constructor(e){super(),te(this,e,zs,Gs,ee,{isProcessing:0,messages:1,onSendMessage:13,onClearMessages:2,onCopyConversation:3})}}function Bs(n){let e,t,s,i,r;return t=new kt({props:{isProcessing:n[1],messages:n[0],streamingContent:n[2],onCopyMessage:n[6]}}),i=new At({props:{isProcessing:n[1],messages:n[0],onSendMessage:n[3],onClearMessages:n[4],onCopyConversation:n[5]}}),{c(){e=v("div"),Y(t.$$.fragment),s=N(),Y(i.$$.fragment),d(e,"class","chat-modal svelte-xkhj2a")},m(a,o){M(a,e,o),H(t,e,null),m(e,s),H(i,e,null),r=!0},p(a,[o]){const c={};o&2&&(c.isProcessing=a[1]),o&1&&(c.messages=a[0]),o&4&&(c.streamingContent=a[2]),o&64&&(c.onCopyMessage=a[6]),t.$set(c);const u={};o&2&&(u.isProcessing=a[1]),o&1&&(u.messages=a[0]),o&8&&(u.onSendMessage=a[3]),o&16&&(u.onClearMessages=a[4]),o&32&&(u.onCopyConversation=a[5]),i.$set(u)},i(a){r||(F(t.$$.fragment,a),F(i.$$.fragment,a),r=!0)},o(a){D(t.$$.fragment,a),D(i.$$.fragment,a),r=!1},d(a){a&&x(e),W(t),W(i)}}}function Os(n,e,t){let{messages:s=[]}=e,{isProcessing:i=!1}=e,{streamingContent:r=""}=e,{onSendMessage:a}=e,{onClearMessages:o}=e,{onCopyConversation:c}=e,{onCopyMessage:u}=e;return n.$$set=l=>{"messages"in l&&t(0,s=l.messages),"isProcessing"in l&&t(1,i=l.isProcessing),"streamingContent"in l&&t(2,r=l.streamingContent),"onSendMessage"in l&&t(3,a=l.onSendMessage),"onClearMessages"in l&&t(4,o=l.onClearMessages),"onCopyConversation"in l&&t(5,c=l.onCopyConversation),"onCopyMessage"in l&&t(6,u=l.onCopyMessage)},[s,i,r,a,o,c,u]}let Vs=class extends se{constructor(e){super(),te(this,e,Os,Bs,ee,{messages:0,isProcessing:1,streamingContent:2,onSendMessage:3,onClearMessages:4,onCopyConversation:5,onCopyMessage:6})}},qs=class extends lt{};class js extends y.Modal{constructor(...e){super(e[0]),this.chat=new qs(...e),this.chat.contentEl=this.contentEl}onOpen(){const{contentEl:e}=this;e.empty(),e.addClass("chat-modal"),this.chat.initializeComponent(e,Vs)}onClose(){const{contentEl:e}=this;this.chat.cleanup(),e.empty(),e.removeClass("chat-modal")}}function Ks(n){let e,t,s,i,r;return t=new kt({props:{isProcessing:n[1],messages:n[0],streamingContent:n[2],onCopyMessage:n[6]}}),i=new At({props:{isProcessing:n[1],messages:n[0],onSendMessage:n[3],onClearMessages:n[4],onCopyConversation:n[5]}}),{c(){e=v("div"),Y(t.$$.fragment),s=N(),Y(i.$$.fragment),d(e,"class","chat-view svelte-i0aku1")},m(a,o){M(a,e,o),H(t,e,null),m(e,s),H(i,e,null),r=!0},p(a,[o]){const c={};o&2&&(c.isProcessing=a[1]),o&1&&(c.messages=a[0]),o&4&&(c.streamingContent=a[2]),o&64&&(c.onCopyMessage=a[6]),t.$set(c);const u={};o&2&&(u.isProcessing=a[1]),o&1&&(u.messages=a[0]),o&8&&(u.onSendMessage=a[3]),o&16&&(u.onClearMessages=a[4]),o&32&&(u.onCopyConversation=a[5]),i.$set(u)},i(a){r||(F(t.$$.fragment,a),F(i.$$.fragment,a),r=!0)},o(a){D(t.$$.fragment,a),D(i.$$.fragment,a),r=!1},d(a){a&&x(e),W(t),W(i)}}}function Us(n,e,t){let{messages:s=[]}=e,{isProcessing:i=!1}=e,{streamingContent:r=""}=e,{onSendMessage:a}=e,{onClearMessages:o}=e,{onCopyConversation:c}=e,{onCopyMessage:u}=e;return n.$$set=l=>{"messages"in l&&t(0,s=l.messages),"isProcessing"in l&&t(1,i=l.isProcessing),"streamingContent"in l&&t(2,r=l.streamingContent),"onSendMessage"in l&&t(3,a=l.onSendMessage),"onClearMessages"in l&&t(4,o=l.onClearMessages),"onCopyConversation"in l&&t(5,c=l.onCopyConversation),"onCopyMessage"in l&&t(6,u=l.onCopyMessage)},[s,i,r,a,o,c,u]}let Hs=class extends se{constructor(e){super(),te(this,e,Us,Ks,ee,{messages:0,isProcessing:1,streamingContent:2,onSendMessage:3,onClearMessages:4,onCopyConversation:5,onCopyMessage:6})}};class Ws extends lt{}class Ys extends y.ItemView{constructor(e,...t){super(e),this.chat=new Ws(...t),this.chat.contentEl=this.containerEl.children[1]}getViewType(){return ae}getDisplayText(){return"AI Chat"}async onOpen(){const e=this.containerEl.children[1];e.empty(),this.chat.initializeComponent(e,Hs)}async onClose(){const e=this.containerEl.children[1];this.chat.cleanup(),e.empty()}}class Js extends y.Modal{constructor(e,t){super(e),this.template=t,this.variables={},this.inputSettings=[],this.isGenerating=!1}onOpen(){const{contentEl:e,titleEl:t}=this;t.setText(this.template.name),this.template.description&&e.createEl("p",{text:this.template.description}),this.template.variables&&this.template.variables.forEach(s=>{const i=new y.Setting(e).setName(s).addText(r=>r.setPlaceholder(`Enter ${s}`).onChange(a=>{this.variables[s]=a}));this.inputSettings.push(i)}),this.isGenerating&&e.createEl("p",{text:"Generating..."}),this.generateButton=new y.Setting(e).addButton(s=>s.setButtonText("Generate").setCta().onClick(async()=>{var i;this.setGenerating(!0);try{await((i=this.onSubmitCallback)==null?void 0:i.call(this,this.variables)),this.close()}catch{this.setGenerating(!1)}}))}setGenerating(e){var s,i;this.isGenerating=e,this.inputSettings.forEach(r=>r.setDisabled(e)),(s=this.generateButton)==null||s.setDisabled(e);const t=(i=this.generateButton)==null?void 0:i.controlEl.querySelector("button");t&&(t.textContent=e?"Generating...":"Generate")}onClose(){const{contentEl:e}=this;e.empty()}onSubmit(e){this.onSubmitCallback=e}}class Qs{constructor(e,t,s,i,r){this.app=e,this.logger=t,this.gateway=s,this.settings=i,this.templateManager=r}async generateFromTemplate(e,t){const s=await this.templateManager.applyTemplate(e,t);return this.generateText({prompt:s,maxTokens:this.settings.maxTokens,temperature:this.settings.temperature})}async generateInEditor(e,t={}){const s=e.getSelection(),i=t.position||e.getCursor(),r="🤖 Generating...";let a;try{if(t.replaceLine!==void 0){const u=e.getLine(t.replaceLine);e.replaceRange(r,{line:t.replaceLine,ch:0},{line:t.replaceLine,ch:u.length}),a={line:t.replaceLine,ch:0}}else if(t.replaceSelection&&e.somethingSelected()){const u=e.getCursor("from");e.replaceSelection(r),a=u}else e.replaceRange(r,i),a=i;new y.Notice(`Generating ${t.templateName||"text"}...`);let o;if(t.templateName){const u=this.templateManager.getTemplate(t.templateName);if(!u)throw new Error(`Template ${t.templateName} not found`);o=await this.generateFromTemplate(u,{text:t.text||s||e.getValue()}),t.prependHash&&!o.startsWith("#")&&(o="# "+o),t.addNewline&&(o=`

${o}`)}else o=await this.generateText({prompt:s});const c={line:a.line,ch:a.ch+r.length};e.replaceRange(o,a,c),new y.Notice("Generated successfully")}catch(o){if(a){const c={line:a.line,ch:a.ch+r.length};e.replaceRange("",a,c)}this.logger.error("Generation failed",{error:o instanceof Error?o.message:String(o)}),new y.Notice("Failed to generate: "+(o instanceof Error?o.message:String(o)))}}async generateText(e){if(!e.prompt)throw new Error("Prompt is required");return await this.gateway.generateText([{role:"user",content:e.prompt}])}async generateWithModal(e,t,s={}){const i=this.templateManager.getTemplate(t);if(!i)throw new Error(`Template ${t} not found`);const r=new Js(this.app,i);r.onSubmit(async a=>{r.close(),new y.Notice("Generating...");const o=await this.generateFromTemplate(i,{...a,text:e.getValue()});if(s.replaceLine!==void 0){const c=e.getLine(s.replaceLine);e.replaceRange(o,{line:s.replaceLine,ch:0},{line:s.replaceLine,ch:c.length})}else{const c=s.position||e.getCursor();e.replaceRange(o,c)}new y.Notice("Generated successfully")}),r.open()}}class Xs{constructor(e,t){this.app=e,this.logger=t,this.templates=new Map,Object.entries(Rt).forEach(([s,i])=>{this.templates.set(s,{...i,default:!0})})}async loadCustomTemplates(e){if(!this.app.vault.getAbstractFileByPath(e)){this.logger.debug("No custom templates folder found");return}const s=this.app.vault.getMarkdownFiles().filter(i=>i.path.startsWith(e));for(const i of s)try{const r=await this.app.vault.read(i),a=this.parseTemplate(r);this.templates.set(a.name,a),this.logger.debug(`Loaded custom template: ${a.name}`)}catch(r){this.logger.error(`Failed to load template ${i.path}`,{error:r})}}parseTemplate(e){const t=this.extractFrontmatter(e);if(!t.name)throw new Error("Template must have a name");return{name:t.name,description:t.description,prompt:e.replace(/^---[\s\S]*?---/,"").trim(),variables:t.variables,tags:t.tags}}extractFrontmatter(e){const t=e.match(/^---\n([\s\S]*?)\n---/);if(!t)return{};try{return y.parseYaml(t[1])}catch(s){return this.logger.error("Failed to parse template frontmatter",{error:s}),{}}}async applyTemplate(e,t){let s=e.prompt;for(const[i,r]of Object.entries(t))s=s.replace(`{{${i}}}`,r);return s}getTemplate(e){return this.templates.get(e)}getTemplates(){return this.templates}}class Zs extends y.Plugin{constructor(){super(...arguments),this.logger=new Wt}getDecryptedApiKey(e){if(!e)return"";try{if(le.isEncryptionAvailable())return le.decryptString(Buffer.from(e,"base64"))}catch(t){this.logger.error("Failed to decrypt API key:",{error:t instanceof Error?t.message:String(t),stack:t instanceof Error?t.stack:void 0})}return e}async initializeServices(){const e=this.getDecryptedApiKey(this.settings.cloudflareAiApiKey),t=this.getDecryptedApiKey(this.settings.cloudflareVectorizeApiKey);this.gateway=new Kt(this.logger,this.settings.cloudflareAccountId,this.settings.cloudflareAiGatewayId,e,this.settings.modelId,this.settings.maxTokens,this.settings.temperature),this.vectorize=new Ht(this.logger,this.settings.cloudflareAccountId,t,this.settings.vectorizeIndexName),this.syncService=new Yt(this.app,this.logger,this.vectorize,this.gateway,this.settings.textEmbeddingsModelId,this.settings.ignoredFolders)}setupSyncInterval(){this.syncInterval&&window.clearInterval(this.syncInterval),this.settings.syncEnabled&&(this.syncInterval=window.setInterval(()=>this.syncNotes(),this.settings.autoSyncInterval*60*1e3),this.registerInterval(this.syncInterval))}async loadSettings(){this.settings=Object.assign({},Nt,await this.loadData()),await this.initializeServices(),this.logger.debug("Settings loaded")}async saveSettings(){await this.saveData(this.settings),await this.initializeServices(),this.setupSyncInterval(),this.logger.debug("Settings saved")}async activateView(){if(this.app.workspace.getLeavesOfType(ae).length===0){const t=this.app.workspace.getRightLeaf(!1);t&&await t.setViewState({type:ae,active:!0})}this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(ae)[0])}async onload(){await this.loadSettings(),ot({level:this.settings.logLevel,serviceName:it}),this.addSettingTab(new $t(this.app,this)),this.registerView(ae,e=>new Ys(e,this.app,this.logger,this.gateway,this.vectorize,this.settings,this.syncService)),this.setupSyncInterval(),this.registerEvent(this.app.metadataCache.on("deleted",async e=>{try{if(e instanceof y.TFile&&e.extension==="md"){const t=this.syncService.createVectorId(e.name);await this.vectorize.deleteVectorsByIds([t]);const s=`.cloudflare-ai/sync/${t}.json`;await this.app.vault.adapter.exists(s)&&await this.app.vault.adapter.remove(s),new y.Notice(`Deleted file ${e.path} from the vector index`)}}catch(t){this.logger.error("Failed to remove deleted file from vector index:",{error:t instanceof Error?t.message:String(t),stack:t instanceof Error?t.stack:void 0}),new y.Notice(`Failed to remove deleted file ${e.path} from the vector index: ${t instanceof Error?t.message:String(t)}`)}})),this.app.workspace.onLayoutReady(async()=>{try{this.addRibbonIcon("message-circle","Open AI Chat",()=>this.activateView()),this.syncStatusBar=this.addStatusBarItem(),this.updateSyncStatus("Ready");const e=new Xs(this.app,this.logger);await e.loadCustomTemplates(this.settings.customTemplatesFolder),this.addCommand({id:"start-chat",name:"Start Chat",callback:()=>{new js(this.app,this.logger,this.gateway,this.vectorize,this.settings,this.syncService).open()}}),this.addCommand({id:"sync-notes",name:"Sync Notes",callback:()=>this.syncNotes()});const t=new Qs(this.app,this.logger,this.gateway,this.settings,e);this.addCommand({id:"continue-writing",name:"Continue Writing",editorCallback:i=>{t.generateInEditor(i,{templateName:"continue",insertAtCursor:!0,addNewline:!0})}}),this.addCommand({id:"summarise-selection",name:"Summarise Selection",editorCheckCallback:(i,r)=>{const a=r.somethingSelected();if(i)return a;t.generateInEditor(r,{templateName:"summarise",replaceSelection:!0})}}),this.addCommand({id:"expand-selection",name:"Expand Selection",editorCheckCallback:(i,r)=>{const a=r.somethingSelected();if(i)return a;t.generateInEditor(r,{templateName:"expand",insertAtCursor:!0,addNewline:!0})}}),this.addCommand({id:"rewrite-selection",name:"Rewrite Selection",editorCheckCallback:(i,r)=>{const a=r.somethingSelected();if(i)return a;t.generateInEditor(r,{templateName:"rewrite",replaceSelection:!0})}}),this.addCommand({id:"simplify-selection",name:"Simplify Selection",editorCheckCallback:(i,r)=>{const a=r.somethingSelected();if(i)return a;t.generateInEditor(r,{templateName:"simplify",replaceSelection:!0})}}),this.addCommand({id:"suggest-tags",name:"Suggest Tags",editorCallback:i=>{t.generateInEditor(i,{templateName:"suggest-tags",replaceSelection:!1,addNewline:!0})}}),this.addCommand({id:"generate-title",name:"Generate Title",editorCallback:async i=>{const r=this.app.workspace.getActiveFile();if(r)try{const a=i.getValue(),o=e.getTemplate("generate-title");if(!o)throw new Error("Generate title template not found");const u=(await this.gateway.makeRequest({modelId:this.settings.modelId,prompt:await e.applyTemplate(o,{text:a}),shouldStream:!1,type:"text",maxRetries:3})).response;if(typeof u!="string")throw new Error("Generated title is not a string");const l=u.replace(/^#\s+/,"").replace(/[\/\\:*?"<>|]/g,"").replace(/\s+/g,"-").trim().toLowerCase(),h=r.path.replace(r.name,`${l}.${r.extension}`);await this.app.fileManager.renameFile(r,h),new y.Notice(`File renamed to: ${l}`)}catch(a){this.logger.error("Failed to generate title and rename file:",{error:a instanceof Error?a.message:String(a),stack:a instanceof Error?a.stack:void 0}),new y.Notice("Failed to generate title and rename file")}}}),this.addCommand({id:"generate-text-with-variables",name:"Generate Text With Variables",editorCallback:i=>{t.generateWithModal(i,"generate-text",{addNewline:!0})}}),this.addCommand({id:"brainstorm",name:"Brainstorm",editorCallback:i=>{t.generateInEditor(i,{templateName:"brainstorm",replaceSelection:!1,addNewline:!0})}});const s=Array.from(e.getTemplates()).filter(([i,r])=>!r.default);for(const[i,r]of s){const a=`template-${i}`;this.addCommand({id:a,name:r.description||`Execute template: ${r.name}`,editorCallback:o=>{var c;(c=r.variables)!=null&&c.length?t.generateWithModal(o,r.name,{addNewline:!0}):t.generateInEditor(o,{templateName:r.name,replaceSelection:!1,addNewline:!0})}})}this.logger.debug("loaded")}catch(e){this.logger.error("Failed to load commands",{error:e instanceof Error?e.message:String(e)})}})}onunload(){this.syncInterval&&window.clearInterval(this.syncInterval),this.logger&&this.logger.destroy(),this.app.workspace.detachLeavesOfType(ae),this.logger.debug("unloaded")}updateSyncStatus(e){this.syncStatusBar.setText(`AI Sync: ${e}`),this.logger.debug("Sync status updated",{status:e})}async syncNotes(){try{if(this.logger.debug("Syncing notes"),this.updateSyncStatus("In Progress..."),!this.syncService)throw new Error("Sync service not initialized");await this.syncService.sync(),this.settings.lastSyncTime=Date.now(),await this.saveSettings();const e=new Date().toLocaleTimeString();this.updateSyncStatus(`Complete (${e})`),this.logger.debug("Sync complete",{timestamp:e})}catch(e){this.logger.error("Sync failed",{error:e instanceof Error?e.message:String(e),stack:e instanceof Error?e.stack:void 0}),this.updateSyncStatus("Failed"),new y.Notice(`Sync failed: ${e instanceof Error?e.message:String(e)}`)}}}module.exports=Zs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
